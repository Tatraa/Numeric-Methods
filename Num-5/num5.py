import numpy as np
import matplotlib.pyplot as plt
import copy
import random

name = 'wykres.svg'
n = 100
stop = 150
pres = 10**(-16)
x = random.sample(range(stop), 100)
b = list(range(1, n + 1))

# Jacobi
def jacobi(x, stop):
    err = []
    norm1 = 0
    while stop:
        y = x.copy()
        for i in range(n):
            if(i == 0):
                x[i] = (b[i]-x[i+1]-0.2*x[i+2])/3
            elif(i == 1):
                x[i] = (b[i] - y[i-1] - x[i+1]-0.2*x[i+2])/3
            elif(i == n-2):
                x[i] = (b[i] - y[i-1]-0.2*y[i-2] - x[i+1])/3
            elif(i == n-1):
                x[i] = (b[i] - y[i-1] - 0.2*y[i-2])/3
            else:
                x[i] = (b[i] - y[i-1] - 0.2*y[i-2]-x[i+1]-0.2*x[i+2])/3
        norm2 = np.sqrt(sum(map(lambda a, b: (a - b)**2, x, y)))
        err.append(copy.deepcopy(x))

        if abs(norm1-norm2) < pres:
            break
        norm1 = norm2
        stop = stop - 1

    print("Jacobi:")
    print(x)
    print()
    return err

# Gauss-Seidel
def gauss_seidel(x, stop):
    err = []
    norm1 = 0
    while stop:
        y = x.copy()
        for i in range(n):
            if(i == 0):
                x[i] = (b[i]-x[i+1]-0.2*x[i+2])/3
            elif(i == 1):
                x[i] = (b[i] - x[i-1] - x[i+1]-0.2*x[i+2])/3
            elif(i == n-2):
                x[i] = (b[i] - x[i-1]-0.2*x[i-2] - x[i+1])/3
            elif(i == n-1):
                x[i] = (b[i] - x[i-1] - 0.2*x[i-2])/3
            else:
                x[i] = (b[i] - x[i-1] - 0.2*x[i-2]-x[i+1]-0.2*x[i+2])/3

        norm2 = np.sqrt(sum(map(lambda a, b: (a - b)**2, x, y)))
        err.append(copy.deepcopy(x))

        if abs(norm1-norm2) < pres:
            break
        norm1 = norm2
        stop = stop - 1

    print("Gauss-Seidel:")
    print(x)
    print()
    return err

def main():
	err1 = jacobi(x.copy(), stop)
	err2 = gauss_seidel(x.copy(), stop)
	
	# Diff between iterable solution and accurate solution
	w1 = []
	last1 = err1[-1]
	for i in range(len(err1)-1):
	    w1.append(np.sqrt(sum(map(lambda a, b: (a - b)**2, err1[i], last1))))
	
	w2 = []
	last2 = err2[-1]
	for i in range(len(err2)-1):
	    w2.append(np.sqrt(sum(map(lambda a, b: (a - b)**2, err2[i], last2))))
	
	# Making a diagram
	plt.grid(True)
	plt.xlabel('n')
	plt.ylabel("E(k)")
	plt.plot([i for i in range(1, len(w1)+1)], w1)
	plt.plot([i for i in range(1, len(w2)+1)], w2)
	plt.legend(['Jacobi', 'Gauss-Seidel'])
	plt.title('PorÃ³wnanie metod iteracyjnych, pocztek w losowym wektorze x')
	plt.savefig(name)
	plt.show()
	
main()


# gaus - [0.1712600924915493, 0.3752397374515706, 0.5548999253689074, 0.7406038489241576, 0.9260230950961977, 1.1110874263605375, 1.2962972717646517, 1.481482921363533, 1.6666660898136743, 1.8518519452948397, 2.0370370477383695, 2.222222211453657, 2.407407410368299, 2.5925925923669677, 2.777777777634029, 2.9629629630301952, 3.148148148135448, 3.3333333333327193, 3.518518518519688, 3.7037037037033413, 3.8888888888889284, 4.074074074074087, 4.2592592592592515, 4.444444444444446, 4.62962962962963, 4.814814814814814, 4.999999999999999, 5.185185185185186, 5.37037037037037, 5.5555555555555545, 5.740740740740741, 5.9259259259259265, 6.11111111111111, 6.296296296296297, 6.481481481481481, 6.666666666666667, 6.85185185185185, 7.037037037037038, 7.222222222222222, 7.407407407407406, 7.592592592592594, 7.777777777777778, 7.962962962962963, 8.148148148148147, 8.333333333333334, 8.518518518518519, 8.703703703703704, 8.88888888888889, 9.074074074074074, 9.25925925925926, 9.444444444444445, 9.629629629629628, 9.814814814814817, 10.0, 10.185185185185185, 10.370370370370372, 10.555555555555554, 10.740740740740739, 10.92592592592593, 11.111111111111109, 11.296296296296298, 11.481481481481481, 11.666666666666666, 11.851851851851853, 12.037037037037036, 12.22222222222222, 12.40740740740741, 12.59259259259259, 12.777777777777779, 12.962962962962962, 13.14814814814815, 13.33333333333333, 13.518518518518517, 13.703703703703694, 13.888888888888959, 14.074074074073907, 14.259259259259084, 14.444444444447472, 14.62962962961788, 14.81481481482921, 15.000000000089301, 15.185185184578444, 15.370370372004347, 15.555555556025894, 15.740740716823792, 15.925926030892441, 16.111110941047105, 16.296295691233045, 16.481486556842206, 16.66665111116536, 16.851856694327793, 17.037221385436535, 17.221300545231433, 17.409241909490536, 17.59631865256542, 17.736053983221193, 18.10744020272868, 18.031154065721086, 16.956038061792967, 26.47924370835427]
# jacobi - [0.17126009249156338, 0.3752397374515966, 0.5548999253689457, 0.7406038489242078, 0.9260230950962592, 1.111087426360611, 1.2962972717647359, 1.4814829213636278, 1.66666608981378, 1.8518519452949542, 2.0370370477384943, 2.2222222114537904, 2.40740741036844, 2.592592592367117, 2.7777777776341868, 2.962962963030359, 3.1481481481356184, 3.3333333333328947, 3.5185185185198704, 3.703703703703527, 3.888888888889118, 4.074074074074281, 4.259259259259447, 4.444444444444645, 4.629629629629831, 4.814814814815018, 5.000000000000205, 5.185185185185391, 5.370370370370577, 5.555555555555763, 5.740740740740947, 5.925925925926134, 6.111111111111318, 6.296296296296503, 6.481481481481687, 6.666666666666871, 6.851851851852056, 7.03703703703724, 7.222222222222421, 7.407407407407605, 7.592592592592791, 7.777777777777973, 7.962962962963156, 8.148148148148339, 8.333333333333522, 8.518518518518702, 8.703703703703887, 8.888888888889069, 9.074074074074254, 9.259259259259439, 9.44444444444462, 9.629629629629806, 9.814814814814987, 10.000000000000172, 10.185185185185354, 10.370370370370539, 10.555555555555722, 10.740740740740904, 10.925925925926089, 11.11111111111127, 11.296296296296456, 11.481481481481639, 11.666666666666826, 11.85185185185201, 12.037037037037193, 12.222222222222378, 12.407407407407561, 12.592592592592746, 12.77777777777793, 12.962962962963113, 13.148148148148296, 13.333333333333483, 13.518518518518663, 13.703703703703837, 13.888888888889104, 14.074074074074048, 14.259259259259224, 14.444444444447607, 14.629629629618016, 14.814814814829345, 15.000000000089427, 15.185185184578577, 15.370370372004468, 15.555555556026015, 15.74074071682391, 15.925926030892548, 16.11111094104721, 16.296295691233144, 16.4814865568423, 16.666651111165454, 16.851856694327875, 17.03722138543661, 17.221300545231497, 17.409241909490593, 17.59631865256547, 17.73605398322124, 18.107440202728714, 18.03115406572111, 16.956038061792984, 26.47924370835428]
